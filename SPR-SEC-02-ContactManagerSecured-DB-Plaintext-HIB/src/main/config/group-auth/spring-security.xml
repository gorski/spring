<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"	
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
	  http://www.springframework.org/schema/beans 
	  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	  http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.2.xsd
	  http://www.springframework.org/schema/security
	  http://www.springframework.org/schema/security/spring-security-3.1.xsd">

  <!-- najprostsza konfiguracja bazujaca na auto-config = true -->
  <http auto-config="true" use-expressions="true">
  <sec:remember-me />
    <intercept-url pattern="/**" access="hasRole('ROLE_USER')" />    
    <!-- Set the logout page -->
    <!-- Adds a LogoutFilter to the chain. The default URL is "/j_spring_security_logout" -->
    <logout logout-url="/logout" />
  </http>
   

<!--  nei potrzebujemy definiowaÄ‡ <sec:global-method-security (przeniesione do kontekstu webowego) -->
  
  <authentication-manager alias="authenticationManager">	
	<authentication-provider>
	  <jdbc-user-service data-source-ref="dataSource"
	   authorities-by-username-query="select gm.username,ga.authority 
	   from group_members gm, group_authorities ga where gm.username =? and gm.group_id = ga.group_id"
	        
	   group-authorities-by-username-query="
         SELECT g.id, g.group_name, ga.authority 
           FROM groups g, group_members gm, group_authorities ga 
          WHERE gm.username = ? and g.id = ga.group_id and g.id = gm.group_id"	   
	   users-by-username-query="
	     SELECT u.email AS username, u.password AS password, u.enabled AS enabled 
	       FROM users u 
	      WHERE u.email = ?"/>
	  <password-encoder hash="plaintext"/>
	</authentication-provider>
  </authentication-manager>

</beans:beans>