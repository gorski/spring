<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	  http://www.springframework.org/schema/beans 
	  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
      http://www.springframework.org/schema/security 
      http://www.springframework.org/schema/security/spring-security-3.2.xsd
          http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
      ">

  <http auto-config="true"  >

      <!--<remember-me token-validity-seconds="36000" />-->



    <!-- Don't set any role restrictions on login.jsp -->
    <intercept-url pattern="/login.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY" />
    <intercept-url pattern="/logoutSuccess.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY" />

    <!-- Restrict access to ALL other pages -->
    <intercept-url pattern="/**" access="ROLE_USER" />

    <!-- Set the login page and what to do if login fails -->
    <form-login login-page="/login.jsp" authentication-failure-url="/login.jsp?login_error=1" 
    default-target-url="/index.jsp"/>

    <!-- Set the logout page and where to go after logout is successful -->
    <logout logout-url="/logout" logout-success-url="/logoutSuccess.jsp" />
  </http>
  
  
  <!--  annotation based security  -->
  <global-method-security secured-annotations="enabled"> </global-method-security>

  <!-- Spring Security itself uses by default this scheme:

       CREATE TABLE users (
         username VARCHAR(50) NOT NULL PRIMARY KEY,
         password VARCHAR(50) NOT NULL,
         enabled BIT NOT NULL
       );

       CREATE TABLE authorities (
         username VARCHAR(50) NOT NULL,
         authority VARCHAR(50) NOT NULL
       );

       You have to map your own implementation to it. -->
  
  <!-- 1st way: default scheme -->
  <!--<authentication-manager alias="authenticationManager">-->
	<!--<authentication-provider>-->
	  <!--<jdbc-user-service data-source-ref="dataSource"/>	  -->
	  <!--<password-encoder hash="plaintext"/>-->
	<!--</authentication-provider>-->
  <!--</authentication-manager>-->

   
  <!-- 2nd way: custom scheme -->  
         
  <authentication-manager alias="authenticationManager">
	<authentication-provider>
	  <jdbc-user-service data-source-ref="dataSource"
	   users-by-username-query="
	     SELECT u.email AS username, u.password AS password, u.enabled AS enabled
	       FROM com_users u
	      WHERE u.email = ?"
       authorities-by-username-query="
         SELECT u.email as username, r.role as authority
           FROM com_roles r, com_users u
          WHERE u.email = ? AND r.email = u.email"/>
	  <password-encoder hash="md5">
	  	<salt-source user-property="username" />
	  </password-encoder>
	</authentication-provider>
  </authentication-manager>


<aop:aspectj-autoproxy />



</beans:beans>